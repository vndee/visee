version: '2.3'

services:
  #####################################
  #                ELK                #
  ####################################

  elasticsearch:
    container_name: visee_elasticsearch
    # comment image decleration if custom Dockerfile was provided
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    # build:
    #   context: docker/elk/elasticsearch/
    #   args:
    #     ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./docker/elk/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: bind
        source: ./data/elastic
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
     - elk
    restart: always

  logstash:
    container_name: visee_logstash
    # comment image decleration if custom Dockerfile was provided
    image: docker.elastic.co/logstash/logstash:${ELK_VERSION}
    # build:
    #   context: docker/elk/logstash/
    #   args:
    #     ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./docker/elk/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./docker/elk/logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
     - elk
    depends_on:
      - elasticsearch
    restart: always

  kibana:
    container_name: visee_kibana
    # comment image decleration if custom Dockerfile was provided
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    # build:
    #   context: docker/elk/kibana/
    #   args:
    #     ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./docker/elk/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
     - elk
    depends_on:
      - elasticsearch
    restart: always
  
  #####################################
  #              KAFKA                #
  #####################################
  
  zookeeper:
    container_name: visee_zookeeper
    image: confluentinc/cp-zookeeper:${KAFKA_VERSION}
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      zk_id: "1"
    ports:
      - "2181:2181"
    networks:
     - elk
    restart: always
    
  kafka:
    container_name: visee_kafka
    hostname: kafka
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092, PLAINTEXT://visee_kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
     - elk
    restart: always

  schema-registry:
    container_name: visee_schema_registry
    image: confluentinc/cp-schema-registry:${KAFKA_VERSION}
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    networks:
     - elk
    restart: always

  redis:
    container_name: visee_redis
    image: redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    networks:
     - elk
    volumes: 
     - ./data/redis:/data
    restart: always

  #####################################
  #              CRAWLER              #
  #####################################

  getlinks:
    container_name: visee_getlinks
    build:
      context: crawler/
      dockerfile: ../docker/crawler/getlinks.Dockerfile
    depends_on:
      - kafka
    environment:
      KAFKA_HOSTS: visee_kafka:9092
      REDIS_HOST: visee_redis
    networks:
     - elk
    restart: always

  itemscraper:
    container_name: visee_itemscraper
    build:
      context: crawler/
      dockerfile: ../docker/crawler/scraper.Dockerfile
    depends_on:
      - kafka
    environment:
      KAFKA_HOSTS: visee_kafka:9092
      REDIS_HOST: visee_redis
    networks:
     - elk
    restart: always

  #####################################
  #              VISUAL               #
  #####################################
  milvus:
    container_name: visee_milvus
    image: milvusdb/milvus:0.6.0-gpu-d120719-2b40dd
    runtime: nvidia
    ports:
      - "19530:19530"
      - "8080:8080"
    volumes:
      - type: bind
        source: ./data/milvus/db
        target: /var/lib/milvus/db
      - type: bind
        source: ./docker/visual/milvus/conf
        target: /var/lib/milvus/conf
      - type: bind
        source: ./docker/visual/milvus/logs
        target: /var/lib/milvus/logs
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    networks:
      - elk
    restart: always

networks:
 elk:
   driver: bridge