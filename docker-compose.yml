version: '2.3'

services:
  elasticsearch:
    container_name: visee_elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    volumes:
      - type: bind
        source: ./docker/elk/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: bind
        source: ./data/elastic
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk
    restart: always

  logstash:
    container_name: visee_logstash
    image: docker.elastic.co/logstash/logstash:${ELK_VERSION}
    volumes:
      - type: bind
        source: ./docker/elk/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./docker/elk/logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: always

  kibana:
    container_name: visee_kibana
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    volumes:
      - type: bind
        source: ./docker/elk/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: always

  zookeeper:
    container_name: visee_zookeeper
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - elk
    restart: always
    
  kafka:
    container_name: visee_kafka
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INSIDE://visee_kafka:9092,OUTSIDE://localhost:9094
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_RETENTION_MINUTES: 10
      KAFKA_LOG_SEGMENT_BYTES: 107374182
      KAFKA_NUM_PARTITIONS: 12
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - elk
    restart: always

  redis:
    container_name: visee_redis
    image: redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    networks:
      - elk
    volumes: 
      - ./data/redis:/data
    restart: always

  getlinks:
    container_name: visee_getlinks
    build:
      context: .
      dockerfile: ./docker/crawler/Dockerfile
    depends_on:
      - kafka
      - redis
    environment:
      KAFKA_HOSTS: visee_kafka:9092
      REDIS_HOST: visee_redis
    entrypoint: ./run_getlinks.sh
    volumes:
      - ${PWD}:/visee
    working_dir: /visee
    networks:
      - elk
    restart: always

  itemscraper:
    container_name: visee_itemscraper
    build:
      context: .
      dockerfile: ./docker/crawler/Dockerfile
    depends_on:
      - kafka
      - redis
    environment:
      KAFKA_HOSTS: visee_kafka:9092
      REDIS_HOST: visee_redis
    entrypoint: ./run_scraper.sh
    volumes: 
      - ${PWD}:/visee
    working_dir: /visee
    networks:
      - elk
    restart: always

  milvus:
    container_name: visee_milvus
    image: milvusdb/milvus:0.6.0-gpu-d120719-2b40dd
    runtime: nvidia
    ports:
      - "19530:19530"
      - "8080:8080"
    volumes:
      - type: bind
        source: ./data/milvus/db
        target: /var/lib/milvus/db
      - type: bind
        source: ./docker/visual/milvus/conf
        target: /var/lib/milvus/conf
      - type: bind
        source: ./docker/visual/milvus/logs
        target: /var/lib/milvus/logs
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    networks:
      - elk
    restart: always

  rest:
    container_name: visee_rest
    build:
      context: .
      dockerfile: ./docker/rest/wsgi.Dockerfile
    entrypoint: ./bash/run_wsgi.sh
    volumes:
      - ${PWD}:/visee
    working_dir: /visee
    networks:
      - elk
    restart: always

  nginx:
    container_name: visee_nginx
    build:
      context: .
      dockerfile: ./docker/rest/nginx.Dockerfile
    command: ["nginx", "-g", "daemon off;"]
    volumes:
      - ${PWD}/docker/rest/nginx.conf:/etc/nginx/nginx.conf
    working_dir: /visee
    ports:
      - "8001:8001"
    networks:
      - elk
    restart: always

networks:
 elk:
   driver: bridge